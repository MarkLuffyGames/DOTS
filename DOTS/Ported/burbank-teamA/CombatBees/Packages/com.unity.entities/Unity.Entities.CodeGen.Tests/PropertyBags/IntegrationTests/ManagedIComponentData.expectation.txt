using Unity.Entities.CodeGen.Tests.PropertyBags.Types;

namespace Unity.Properties.CodeGeneratedPropertyBagRegistry
{
	public class Unity_Entities_CodeGen_Tests_PropertyBags_Types_ManagedIComponentDataPropertyBag : PropertyBag<ManagedIComponentData>
	{
		public static readonly Property<ManagedIComponentData, string> StringField = new Property<ManagedIComponentData, string>("StringField", Unity_Entities_CodeGen_Tests_PropertyBags_Types_ManagedIComponentDataPropertyBag.StringFieldGetter, Unity_Entities_CodeGen_Tests_PropertyBags_Types_ManagedIComponentDataPropertyBag.StringFieldSetter);

		public static string StringFieldGetter(ref ManagedIComponentData container)
		{
			return container.StringField;
		}

		public static void StringFieldSetter(ref ManagedIComponentData container, string val)
		{
			container.StringField = val;
		}

		public override void Accept<TVisitor>(ref ManagedIComponentData container, ref TVisitor visitor, ref ChangeTracker changeTracker)
		{
			visitor.VisitProperty<Property<ManagedIComponentData, string>, ManagedIComponentData, string>(StringField, ref container, ref changeTracker);
		}

		public override bool FindProperty<TAction>(string name, ref ManagedIComponentData container, ref ChangeTracker changeTracker, ref TAction action)
		{
			if (string.Equals(name, "StringField"))
			{
				action.VisitProperty<Property<ManagedIComponentData, string>, string>(StringField, ref container, ref changeTracker);
				return true;
			}
			return false;
		}
	}
}
